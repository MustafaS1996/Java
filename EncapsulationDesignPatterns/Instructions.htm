<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<!-- saved from url=(0061)http://www.horstmann.com/sjsu/spring2019/cs151/hw6/index.html -->
<html xmlns="http://www.w3.org/1999/xhtml" class="gr__horstmann_com"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
    
    
    <link type="text/css" rel="stylesheet" href="./Instructions_files/styles.css">
    <title>CS151 Homework</title> 
  </head> 
  <body data-gr-c-s-loaded="true">  

    <h1>San Jose State University | CS 151 - OO Design | Spring 2019</h1>
    <h2>Homework 6</h2>
    <p>We will practice the design patterns from sections 5.4 - 5.6 of the textbook.</p>
    <ol><li>Start with the <code>ch04/animation</code> project and the modification of it in <a href="http://www.horstmann.com/sjsu/spring2019/cs151/day8/index.html">Lab 8</a> that allows you to animate multiple shapes.</li>
    <li>Add this method to <code>MoveableShape</code>:<pre>/**
 * Yields the bounding rectangle of this shape.
 * @return the bounding rectangle
 */
Rectangle getBounds();
</pre></li>
      <li>Implement the method in the <code>Car</code> and <code>MoveableIcon</code> classes.</li>
      <li>Provide a decorator class <code>BoxedShape</code> with a constructor
        <pre>public BoxedShape(MoveableShape shape, int gap)
</pre> that, when drawn, yields the original shape with a rectangle along its bounds if <code>gap</code> is zero, or with as many pixels between the bounds and the rectangle on each side as given by <code>gap</code>. It's a decorator, so you should be able to apply it twice:
        <pre>new BoxedShape(new BoxedShape(new CarShape(...), 0), 5)
</pre></li>
      <li>Use the Composite pattern to group multiple shapes into one. A <code>CompoundShape</code> draws all of its shapes, moves each of them, and has a bounding box that is the smallest rectangle containing all individual bounding boxes. Provide a constructor
        <pre>public CompoundShape(MoveableShape... shapes)</pre> Note the varargs parameter. You should be able to call
        <pre>new CompoundShape(new BoxedShape(...), new CarShape(...), new MoveableIcon(...))
</pre></li>
      <li>Right now, <code>AnimationTester</code> simply moves all moveable shapes in each timer tick. Suppose we want it to do something more sophisticated, like stopping shapes that reach the boundary. That would be a different strategy. Provide an interface <code>MoveStrategy</code> with an abstract method
        <pre>void process(List&lt;MoveableShape&gt; shapes)
</pre></li>
      <li>Provide a class <code>SimpleMoveStrategy</code> that does what's currently done in <code>AnimationTester</code>, and a class <code>BoundedMoveStrategy</code> that only moves shapes whose bounds are contained inside a <code>Rectangle</code> that is given in the constructor.</li>
      <li>Rename <code>AnimationTester</code> to <code>Animation</code>. Turn the <code>main</code> method into a method
      <pre>public static void show(List&lt;MoveableShape&gt; shapes, MoveStrategy strategy, int width, int height)
</pre> I will call that method from my test cases. Here is an example. Make sure that it compiles with your classes with no change.
        <pre>import java.awt.Rectangle;
import java.util.ArrayList;
import java.util.List;

public class AnimationTester
{
   public static void main(String[] args)
   {
      final int CAR_WIDTH = 100;
      List&lt;MoveableShape&gt; shapes = new ArrayList&lt;&gt;(); 
      shapes.add(new BoxedShape(new CompoundShape(new CarShape(200, 20, CAR_WIDTH),
            new MoveableIcon("dog.png", 100, 10),
            new MoveableIcon("dog.png", 150, 100)), 0));
      Animation.show(shapes, 
            new BoundedMoveStrategy(new Rectangle(0, 0, 500, 200)), 
            600, 200);
   }
}
</pre></li>
      <li>As before, you need to provide javadoc for all classes and methods, and use spaces, not tabs. Make at least three Git commits (and preferably more).</li>
     </ol>
  

</body></html>